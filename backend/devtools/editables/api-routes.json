{
	"auth": {
		"generate-otp": {
			"name": "Generate OTP",
			"description": "Generates an OTP for a specified user",
			"type": "POST",
			"primary-function-file": "utils/auth/otp.ts",
			"primary-function": "generate_otp",
			"parameters": {
				"email": {
					"type": "string",
					"required": true,
					"description": "Email address"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": { "timestamp": "number" },
					"message": "auth.otp.sent",
					"description": "The OTP is successfully sent"
				}
			}
		},
		"resend-otp": {
			"name": "Resend OTP",
			"description": "Resends an OTP for a specified user",
			"type": "POST",
			"primary-function-file": "utils/auth/otp.ts",
			"primary-function": "resend_otp",
			"parameters": {
				"email": {
					"type": "string",
					"required": true,
					"description": "Email address"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "auth.otp.resend",
					"description": "The OTP is successfully resent"
				},
				"otp-not-found": {
					"success": false,
					"data": null,
					"message": "error.otp.not-found",
					"description": "The OTP is not found"
				},
				"otp-expired": {
					"success": false,
					"data": null,
					"message": "error.otp.expired",
					"description": "The OTP is expired"
				}
			}
		},
		"verify-otp": {
			"name": "Verify OTP",
			"description": "Verifies an OTP for a specified user",
			"type": "POST",
			"primary-function-file": "utils/auth/otp.ts",
			"primary-function": "verify_otp",
			"parameters": {
				"email": {
					"type": "string",
					"required": true,
					"description": "Email address"
				},
				"code": {
					"type": "string",
					"required": true,
					"description": "One-time password"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "auth.otp.verified",
					"description": "The OTP is successfully verified"
				},
				"otp-not-found": {
					"success": false,
					"data": null,
					"message": "error.otp.not-found",
					"description": "There is no OTP for the specified user"
				},
				"otp-expired": {
					"success": false,
					"data": null,
					"message": "error.otp.expired",
					"description": "The OTP is expired"
				},
				"otp-invalid": {
					"success": false,
					"data": null,
					"message": "error.otp.invalid",
					"description": "The OTP is invalid"
				}
			}
		},
		"validate-token": {
			"name": "Validate token",
			"need-whole-req": false,
			"description": "Validates a token for a specified user",
			"type": "POST",
			"primary-function-file": "utils/auth/token.ts",
			"primary-function": "validate_token",
			"parameters": {
				"email": {
					"type": "string",
					"required": true,
					"description": "Email address"
				},
				"token": {
					"type": "string",
					"required": true,
					"description": "User's token"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "auth.token.validated",
					"description": "The token is successfully validated"
				},
				"user-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.user.not-found",
					"description": "The specified user is not found in the database"
				},
				"token-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.token.not-found",
					"description": "The user does not have a token in the database<br />(This should never happen)"
				},
				"token-invalid": {
					"success": false,
					"data": null,
					"message": "error.auth.token.invalid",
					"description": "The given token does not match the user's token in the database"
				},
				"token-expired": {
					"success": false,
					"data": null,
					"message": "error.auth.token.expired",
					"description": "The token is expired"
				},
				"field-missing": {
					"success": false,
					"data": null,
					"message": "error.api.field.missing",
					"description": "A required field is missing"
				}
			}
		},
		"grant-user-new-token": {
			"name": "Grant user new token",
			"description": "Grants a user a new token",
			"type": "POST",
			"primary-function-file": "utils/auth/token.ts",
			"primary-function": "grant_user_new_token",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "auth.token.granted",
					"description": "The user's new token is successfully granted"
				},
				"user-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.user.not-found",
					"description": "The specified user is not found in the database"
				}
			}
		},
		"grant-user-token": {
			"name": "Grant user token",
			"description": "Grants a user their token if it exists. If not, it creates a new token",
			"type": "POST",
			"primary-function-file": "utils/auth/token.ts",
			"primary-function": "grant_user_token",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "auth.token.granted",
					"description": "The user's token is successfully granted"
				},
				"user-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.user.not-found",
					"description": "The specified user is not found in the database"
				}
			}
		},
		"revoke-user-token": {
			"name": "Revoke user token",
			"description": "Revokes a user's token. Used for global logout",
			"type": "POST",
			"primary-function-file": "utils/auth/token.ts",
			"primary-function": "revoke_user_token",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "auth.token.revoked",
					"description": "The user's token is successfully revoked"
				},
				"user-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.user.not-found",
					"description": "The specified user is not found in the database"
				}
			}
		}
	},
	"test": {
		"test": {
			"name": "Test",
			"description": "Test API",
			"type": "POST",
			"primary-function-file": "utils/misc/test.ts",
			"primary-function": "test",
			"parameters": {},
			"responses": {}
		}
	},
	"data": {
		"update_data": {
			"name": "Update data",
			"description": "Updates data",
			"type": "POST",
			"primary-function-file": "utils/data/data.ts",
			"primary-function": "update_data",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				},
				"date": {
					"type": "string",
					"required": true,
					"description": "Date"
				},
				"data": {
					"type": "object",
					"required": true,
					"description": "Data"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "data.updated",
					"description": "The data is successfully updated"
				},
				"could-not-update": {
					"success": false,
					"data": null,
					"message": "error.data.could-not-update",
					"description": "The data could not be updated"
				}
			}
		},
		"get_data": {
			"name": "Get data",
			"description": "Gets data",
			"type": "POST",
			"primary-function-file": "utils/data/data.ts",
			"primary-function": "get_data",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				},
				"token": {
					"type": "string",
					"required": true,
					"description": "Token"
				},
				"date": {
					"type": "string",
					"required": true,
					"description": "Date"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": "The data for the specified date",
					"message": "data.found",
					"description": "The data is successfully found"
				},
				"not-found": {
					"success": false,
					"data": null,
					"message": "error.data.not-found",
					"description": "The data is not found"
				}
			}
		},
		"get_prefill": {
			"name": "Get prefill",
			"description": "Gets prefill",
			"type": "POST",
			"primary-function-file": "utils/data/data.ts",
			"primary-function": "get_prefill",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				},
				"token": {
					"type": "string",
					"required": true,
					"description": "Token"
				},
				"date": {
					"type": "string",
					"required": true,
					"description": "Date"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": "Prefill data",
					"message": "prefill.found",
					"description": "The data is successfully found"
				},
				"not-found": {
					"success": false,
					"data": null,
					"message": "error.prefill.not-found",
					"description": "The data is not found"
				}
			}
		}
	},
	"structure": {
		"get_structure": {
			"name": "Get structure",
			"description": "Gets structure",
			"type": "POST",
			"primary-function-file": "utils/structure/get-structure.ts",
			"primary-function": "get_structure",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				},
				"token": {
					"type": "string",
					"required": true,
					"description": "Token"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": "Structure object",
					"message": "structure.found",
					"description": "The structure is successfully found"
				},
				"user-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.user.not-found",
					"description": "The specified user is not found in the database"
				},
				"structure-not-found": {
					"success": false,
					"data": null,
					"message": "error.structure.not-found",
					"description": "Could not find a structure for the specified user. The default structure is to be used."
				}
			}
		},
		"update_structure": {
			"name": "Update structure",
			"description": "Updates structure",
			"type": "POST",
			"primary-function-file": "utils/structure/update-structure.ts",
			"primary-function": "update_structure",
			"parameters": {
				"user": {
					"type": "string",
					"required": true,
					"description": "User"
				},
				"token": {
					"type": "string",
					"required": true,
					"description": "Token"
				},
				"structure": {
					"type": "object",
					"required": true,
					"description": "Structure"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": null,
					"message": "structure.updated",
					"description": "The structure is successfully updated"
				},
				"user-not-found": {
					"success": false,
					"data": null,
					"message": "error.auth.user.not-found",
					"description": "The specified user is not found in the database"
				},
				"could-not-update": {
					"success": false,
					"data": null,
					"message": "error.structure.could-not-update",
					"description": "Could not update the structure"
				}
			}
		}
	},
	"account": {
		"register": {
			"name": "Register",
			"description": "Registers a new account",
			"type": "POST",
			"primary-function-file": "utils/account/register.ts",
			"primary-function": "register",
			"parameters": {
				"email": {
					"type": "string",
					"required": true,
					"description": "Email address"
				},
				"form_info": {
					"type": "object",
					"required": true,
					"description": "Form info"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": {
						"token": "string",
						"email": "string (Account's email address)",
						"name": "string (First + Last name)"
					},
					"message": "account.registered",
					"description": "The account is successfully registered"
				},
				"account-already-exists": {
					"success": false,
					"data": null,
					"message": "error.account.already-exists",
					"description": "The account already exists"
				}
			}
		},
		"login": {
			"name": "Login",
			"description": "Logs in an account",
			"type": "POST",
			"primary-function-file": "utils/account/authenticate.ts",
			"primary-function": "login",
			"parameters": {
				"email": {
					"type": "string",
					"required": true,
					"description": "Email address"
				},
				"otp": {
					"type": "string",
					"required": true,
					"description": "One-time password"
				},
				"reset_token": {
					"type": "boolean",
					"required": false,
					"description": "Reset the user's token upon login?<br />Default: FALSE"
				}
			},
			"responses": {
				"success": {
					"success": true,
					"data": {
						"token": "string",
						"email": "string (Account's email address)",
						"name": "string (First + Last name)"
					},
					"message": "account.logged-in",
					"description": "The account is successfully logged in"
				},
				"account-not-found": {
					"success": false,
					"data": null,
					"message": "error.account.not-found",
					"description": "The specified account is not found in the database"
				},
				"account-disabled": {
					"success": false,
					"data": null,
					"message": "error.account.disabled",
					"description": "The specified account is disabled"
				}
			}
		}
	}
}
